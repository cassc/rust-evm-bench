<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1014" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="997.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="997.00"> </text><svg id="frames" x="10" width="1180" total_samples="98"><g><title>perf-exec (4 samples, 4.08%)</title><rect x="0.0000%" y="949" width="4.0816%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="959.50">perf..</text></g><g><title>[unknown] (4 samples, 4.08%)</title><rect x="0.0000%" y="933" width="4.0816%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="943.50">[unk..</text></g><g><title>[unknown] (4 samples, 4.08%)</title><rect x="0.0000%" y="917" width="4.0816%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="927.50">[unk..</text></g><g><title>[unknown] (4 samples, 4.08%)</title><rect x="0.0000%" y="901" width="4.0816%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="4"/><text x="0.2500%" y="911.50">[unk..</text></g><g><title>[unknown] (4 samples, 4.08%)</title><rect x="0.0000%" y="885" width="4.0816%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="4"/><text x="0.2500%" y="895.50">[unk..</text></g><g><title>[unknown] (4 samples, 4.08%)</title><rect x="0.0000%" y="869" width="4.0816%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="4"/><text x="0.2500%" y="879.50">[unk..</text></g><g><title>[unknown] (4 samples, 4.08%)</title><rect x="0.0000%" y="853" width="4.0816%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="863.50">[unk..</text></g><g><title>[unknown] (4 samples, 4.08%)</title><rect x="0.0000%" y="837" width="4.0816%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="4"/><text x="0.2500%" y="847.50">[unk..</text></g><g><title>[unknown] (4 samples, 4.08%)</title><rect x="0.0000%" y="821" width="4.0816%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="831.50">[unk..</text></g><g><title>[unknown] (4 samples, 4.08%)</title><rect x="0.0000%" y="805" width="4.0816%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="4"/><text x="0.2500%" y="815.50">[unk..</text></g><g><title>[unknown] (4 samples, 4.08%)</title><rect x="0.0000%" y="789" width="4.0816%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="4"/><text x="0.2500%" y="799.50">[unk..</text></g><g><title>[unknown] (4 samples, 4.08%)</title><rect x="0.0000%" y="773" width="4.0816%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="783.50">[unk..</text></g><g><title>[unknown] (4 samples, 4.08%)</title><rect x="0.0000%" y="757" width="4.0816%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="4"/><text x="0.2500%" y="767.50">[unk..</text></g><g><title>[unknown] (4 samples, 4.08%)</title><rect x="0.0000%" y="741" width="4.0816%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="4"/><text x="0.2500%" y="751.50">[unk..</text></g><g><title>[unknown] (4 samples, 4.08%)</title><rect x="0.0000%" y="725" width="4.0816%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="4"/><text x="0.2500%" y="735.50">[unk..</text></g><g><title>&lt;revm::db::in_memory_db::CacheDB&lt;ExtDB&gt; as revm::db::Database&gt;::basic (1 samples, 1.02%)</title><rect x="4.0816%" y="917" width="1.0204%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="1"/><text x="4.3316%" y="927.50"></text></g><g><title>revm::instructions::system::calldataload (1 samples, 1.02%)</title><rect x="5.1020%" y="917" width="1.0204%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="5.3520%" y="927.50"></text></g><g><title>revm::interpreter::stack::Stack::len (1 samples, 1.02%)</title><rect x="5.1020%" y="901" width="1.0204%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="1"/><text x="5.3520%" y="911.50"></text></g><g><title>[[heap]] (3 samples, 3.06%)</title><rect x="4.0816%" y="933" width="3.0612%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="3"/><text x="4.3316%" y="943.50">[[h..</text></g><g><title>revm::journaled_state::JournaledState::transfer (1 samples, 1.02%)</title><rect x="6.1224%" y="917" width="1.0204%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="1"/><text x="6.3724%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 1.02%)</title><rect x="7.1429%" y="917" width="1.0204%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="1"/><text x="7.3929%" y="927.50"></text></g><g><title>bytes::bytes::promotable_even_clone (1 samples, 1.02%)</title><rect x="8.1633%" y="917" width="1.0204%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="1"/><text x="8.4133%" y="927.50"></text></g><g><title>evm::executor::stack::executor::StackExecutor&lt;S,P&gt;::execute (1 samples, 1.02%)</title><rect x="9.1837%" y="917" width="1.0204%" height="15" fill="rgb(221,5,38)" fg:x="9" fg:w="1"/><text x="9.4337%" y="927.50"></text></g><g><title>evm_runtime::Runtime::run (1 samples, 1.02%)</title><rect x="9.1837%" y="901" width="1.0204%" height="15" fill="rgb(247,18,42)" fg:x="9" fg:w="1"/><text x="9.4337%" y="911.50"></text></g><g><title>evm_core::Machine::step (1 samples, 1.02%)</title><rect x="9.1837%" y="885" width="1.0204%" height="15" fill="rgb(241,131,45)" fg:x="9" fg:w="1"/><text x="9.4337%" y="895.50"></text></g><g><title>evm_core::eval::eval (1 samples, 1.02%)</title><rect x="9.1837%" y="869" width="1.0204%" height="15" fill="rgb(249,31,29)" fg:x="9" fg:w="1"/><text x="9.4337%" y="879.50"></text></g><g><title>evm_core::eval::eval_jump (2 samples, 2.04%)</title><rect x="10.2041%" y="917" width="2.0408%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="2"/><text x="10.4541%" y="927.50">e..</text></g><g><title>evm_core::eval::eval_push1 (1 samples, 1.02%)</title><rect x="12.2449%" y="917" width="1.0204%" height="15" fill="rgb(238,160,17)" fg:x="12" fg:w="1"/><text x="12.4949%" y="927.50"></text></g><g><title>evm_core::eval::eval_push2 (1 samples, 1.02%)</title><rect x="13.2653%" y="917" width="1.0204%" height="15" fill="rgb(214,148,48)" fg:x="13" fg:w="1"/><text x="13.5153%" y="927.50"></text></g><g><title>evm_core::eval::eval_swap1 (1 samples, 1.02%)</title><rect x="14.2857%" y="917" width="1.0204%" height="15" fill="rgb(232,36,49)" fg:x="14" fg:w="1"/><text x="14.5357%" y="927.50"></text></g><g><title>[[stack]] (9 samples, 9.18%)</title><rect x="7.1429%" y="933" width="9.1837%" height="15" fill="rgb(209,103,24)" fg:x="7" fg:w="9"/><text x="7.3929%" y="943.50">[[stack]]</text></g><g><title>revm::journaled_state::JournaledState::sload (1 samples, 1.02%)</title><rect x="15.3061%" y="917" width="1.0204%" height="15" fill="rgb(229,88,8)" fg:x="15" fg:w="1"/><text x="15.5561%" y="927.50"></text></g><g><title>[rust-evm-bench] (1 samples, 1.02%)</title><rect x="16.3265%" y="933" width="1.0204%" height="15" fill="rgb(213,181,19)" fg:x="16" fg:w="1"/><text x="16.5765%" y="943.50"></text></g><g><title>evm_core::eval::eval_and (1 samples, 1.02%)</title><rect x="16.3265%" y="917" width="1.0204%" height="15" fill="rgb(254,191,54)" fg:x="16" fg:w="1"/><text x="16.5765%" y="927.50"></text></g><g><title>[unknown] (1 samples, 1.02%)</title><rect x="17.3469%" y="917" width="1.0204%" height="15" fill="rgb(241,83,37)" fg:x="17" fg:w="1"/><text x="17.5969%" y="927.50"></text></g><g><title>[unknown] (1 samples, 1.02%)</title><rect x="17.3469%" y="901" width="1.0204%" height="15" fill="rgb(233,36,39)" fg:x="17" fg:w="1"/><text x="17.5969%" y="911.50"></text></g><g><title>[unknown] (1 samples, 1.02%)</title><rect x="17.3469%" y="885" width="1.0204%" height="15" fill="rgb(226,3,54)" fg:x="17" fg:w="1"/><text x="17.5969%" y="895.50"></text></g><g><title>[unknown] (1 samples, 1.02%)</title><rect x="17.3469%" y="869" width="1.0204%" height="15" fill="rgb(245,192,40)" fg:x="17" fg:w="1"/><text x="17.5969%" y="879.50"></text></g><g><title>[unknown] (1 samples, 1.02%)</title><rect x="17.3469%" y="853" width="1.0204%" height="15" fill="rgb(238,167,29)" fg:x="17" fg:w="1"/><text x="17.5969%" y="863.50"></text></g><g><title>[unknown] (1 samples, 1.02%)</title><rect x="17.3469%" y="837" width="1.0204%" height="15" fill="rgb(232,182,51)" fg:x="17" fg:w="1"/><text x="17.5969%" y="847.50"></text></g><g><title>[unknown] (1 samples, 1.02%)</title><rect x="17.3469%" y="821" width="1.0204%" height="15" fill="rgb(231,60,39)" fg:x="17" fg:w="1"/><text x="17.5969%" y="831.50"></text></g><g><title>[unknown] (1 samples, 1.02%)</title><rect x="17.3469%" y="805" width="1.0204%" height="15" fill="rgb(208,69,12)" fg:x="17" fg:w="1"/><text x="17.5969%" y="815.50"></text></g><g><title>[unknown] (1 samples, 1.02%)</title><rect x="17.3469%" y="789" width="1.0204%" height="15" fill="rgb(235,93,37)" fg:x="17" fg:w="1"/><text x="17.5969%" y="799.50"></text></g><g><title>[unknown] (1 samples, 1.02%)</title><rect x="17.3469%" y="773" width="1.0204%" height="15" fill="rgb(213,116,39)" fg:x="17" fg:w="1"/><text x="17.5969%" y="783.50"></text></g><g><title>[unknown] (1 samples, 1.02%)</title><rect x="17.3469%" y="757" width="1.0204%" height="15" fill="rgb(222,207,29)" fg:x="17" fg:w="1"/><text x="17.5969%" y="767.50"></text></g><g><title>[unknown] (1 samples, 1.02%)</title><rect x="17.3469%" y="741" width="1.0204%" height="15" fill="rgb(206,96,30)" fg:x="17" fg:w="1"/><text x="17.5969%" y="751.50"></text></g><g><title>[unknown] (1 samples, 1.02%)</title><rect x="17.3469%" y="725" width="1.0204%" height="15" fill="rgb(218,138,4)" fg:x="17" fg:w="1"/><text x="17.5969%" y="735.50"></text></g><g><title>_int_free (1 samples, 1.02%)</title><rect x="18.3673%" y="917" width="1.0204%" height="15" fill="rgb(250,191,14)" fg:x="18" fg:w="1"/><text x="18.6173%" y="927.50"></text></g><g><title>_int_realloc (1 samples, 1.02%)</title><rect x="19.3878%" y="917" width="1.0204%" height="15" fill="rgb(239,60,40)" fg:x="19" fg:w="1"/><text x="19.6378%" y="927.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 1.02%)</title><rect x="20.4082%" y="917" width="1.0204%" height="15" fill="rgb(206,27,48)" fg:x="20" fg:w="1"/><text x="20.6582%" y="927.50"></text></g><g><title>evm_core::eval::eval_iszero (1 samples, 1.02%)</title><rect x="21.4286%" y="917" width="1.0204%" height="15" fill="rgb(225,35,8)" fg:x="21" fg:w="1"/><text x="21.6786%" y="927.50"></text></g><g><title>evm_core::eval::eval_push2 (1 samples, 1.02%)</title><rect x="22.4490%" y="917" width="1.0204%" height="15" fill="rgb(250,213,24)" fg:x="22" fg:w="1"/><text x="22.6990%" y="927.50"></text></g><g><title>[unknown] (7 samples, 7.14%)</title><rect x="17.3469%" y="933" width="7.1429%" height="15" fill="rgb(247,123,22)" fg:x="17" fg:w="7"/><text x="17.5969%" y="943.50">[unknown]</text></g><g><title>evm_gasometer::Inner::extra_check (1 samples, 1.02%)</title><rect x="23.4694%" y="917" width="1.0204%" height="15" fill="rgb(231,138,38)" fg:x="23" fg:w="1"/><text x="23.7194%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;primitive_types::H160,revm::journaled_state::Account&gt;&gt; (1 samples, 1.02%)</title><rect x="24.4898%" y="325" width="1.0204%" height="15" fill="rgb(231,145,46)" fg:x="24" fg:w="1"/><text x="24.7398%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(primitive_types::H160,revm::journaled_state::Account)&gt;&gt; (1 samples, 1.02%)</title><rect x="24.4898%" y="309" width="1.0204%" height="15" fill="rgb(251,118,11)" fg:x="24" fg:w="1"/><text x="24.7398%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.02%)</title><rect x="24.4898%" y="293" width="1.0204%" height="15" fill="rgb(217,147,25)" fg:x="24" fg:w="1"/><text x="24.7398%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 1.02%)</title><rect x="24.4898%" y="277" width="1.0204%" height="15" fill="rgb(247,81,37)" fg:x="24" fg:w="1"/><text x="24.7398%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 1.02%)</title><rect x="24.4898%" y="261" width="1.0204%" height="15" fill="rgb(209,12,38)" fg:x="24" fg:w="1"/><text x="24.7398%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 1.02%)</title><rect x="24.4898%" y="245" width="1.0204%" height="15" fill="rgb(227,1,9)" fg:x="24" fg:w="1"/><text x="24.7398%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;(primitive_types::H160,revm::journaled_state::Account)&gt; (1 samples, 1.02%)</title><rect x="24.4898%" y="229" width="1.0204%" height="15" fill="rgb(248,47,43)" fg:x="24" fg:w="1"/><text x="24.7398%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::journaled_state::Account&gt; (1 samples, 1.02%)</title><rect x="24.4898%" y="213" width="1.0204%" height="15" fill="rgb(221,10,30)" fg:x="24" fg:w="1"/><text x="24.7398%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::models::AccountInfo&gt; (1 samples, 1.02%)</title><rect x="24.4898%" y="197" width="1.0204%" height="15" fill="rgb(210,229,1)" fg:x="24" fg:w="1"/><text x="24.7398%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;revm::interpreter::bytecode::Bytecode&gt;&gt; (1 samples, 1.02%)</title><rect x="24.4898%" y="181" width="1.0204%" height="15" fill="rgb(222,148,37)" fg:x="24" fg:w="1"/><text x="24.7398%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::interpreter::bytecode::Bytecode&gt; (1 samples, 1.02%)</title><rect x="24.4898%" y="165" width="1.0204%" height="15" fill="rgb(234,67,33)" fg:x="24" fg:w="1"/><text x="24.7398%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::interpreter::bytecode::BytecodeState&gt; (1 samples, 1.02%)</title><rect x="24.4898%" y="149" width="1.0204%" height="15" fill="rgb(247,98,35)" fg:x="24" fg:w="1"/><text x="24.7398%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::interpreter::contract::ValidJumpAddress&gt; (1 samples, 1.02%)</title><rect x="24.4898%" y="133" width="1.0204%" height="15" fill="rgb(247,138,52)" fg:x="24" fg:w="1"/><text x="24.7398%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::vec::Vec&lt;revm::interpreter::contract::AnalysisData&gt;&gt;&gt; (1 samples, 1.02%)</title><rect x="24.4898%" y="117" width="1.0204%" height="15" fill="rgb(213,79,30)" fg:x="24" fg:w="1"/><text x="24.7398%" y="127.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.02%)</title><rect x="24.4898%" y="101" width="1.0204%" height="15" fill="rgb(246,177,23)" fg:x="24" fg:w="1"/><text x="24.7398%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 1.02%)</title><rect x="24.4898%" y="85" width="1.0204%" height="15" fill="rgb(230,62,27)" fg:x="24" fg:w="1"/><text x="24.7398%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 1.02%)</title><rect x="24.4898%" y="69" width="1.0204%" height="15" fill="rgb(216,154,8)" fg:x="24" fg:w="1"/><text x="24.7398%" y="79.50"></text></g><g><title>&lt;&amp;mut T as revm::db::Database&gt;::basic (2 samples, 2.04%)</title><rect x="27.5510%" y="229" width="2.0408%" height="15" fill="rgb(244,35,45)" fg:x="27" fg:w="2"/><text x="27.8010%" y="239.50">&lt;..</text></g><g><title>&lt;revm::db::in_memory_db::CacheDB&lt;ExtDB&gt; as revm::db::Database&gt;::basic (2 samples, 2.04%)</title><rect x="27.5510%" y="213" width="2.0408%" height="15" fill="rgb(251,115,12)" fg:x="27" fg:w="2"/><text x="27.8010%" y="223.50">&lt;..</text></g><g><title>revm::db::in_memory_db::DbAccount::info (2 samples, 2.04%)</title><rect x="27.5510%" y="197" width="2.0408%" height="15" fill="rgb(240,54,50)" fg:x="27" fg:w="2"/><text x="27.8010%" y="207.50">r..</text></g><g><title>&lt;revm::models::AccountInfo as core::clone::Clone&gt;::clone (2 samples, 2.04%)</title><rect x="27.5510%" y="181" width="2.0408%" height="15" fill="rgb(233,84,52)" fg:x="27" fg:w="2"/><text x="27.8010%" y="191.50">&lt;..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 2.04%)</title><rect x="27.5510%" y="165" width="2.0408%" height="15" fill="rgb(207,117,47)" fg:x="27" fg:w="2"/><text x="27.8010%" y="175.50">&lt;..</text></g><g><title>&lt;revm::interpreter::bytecode::Bytecode as core::clone::Clone&gt;::clone (2 samples, 2.04%)</title><rect x="27.5510%" y="149" width="2.0408%" height="15" fill="rgb(249,43,39)" fg:x="27" fg:w="2"/><text x="27.8010%" y="159.50">&lt;..</text></g><g><title>&lt;revm::interpreter::bytecode::BytecodeState as core::clone::Clone&gt;::clone (2 samples, 2.04%)</title><rect x="27.5510%" y="133" width="2.0408%" height="15" fill="rgb(209,38,44)" fg:x="27" fg:w="2"/><text x="27.8010%" y="143.50">&lt;..</text></g><g><title>&lt;revm::interpreter::contract::ValidJumpAddress as core::clone::Clone&gt;::clone (1 samples, 1.02%)</title><rect x="28.5714%" y="117" width="1.0204%" height="15" fill="rgb(236,212,23)" fg:x="28" fg:w="1"/><text x="28.8214%" y="127.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 1.02%)</title><rect x="28.5714%" y="101" width="1.0204%" height="15" fill="rgb(242,79,21)" fg:x="28" fg:w="1"/><text x="28.8214%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 1.02%)</title><rect x="28.5714%" y="85" width="1.0204%" height="15" fill="rgb(211,96,35)" fg:x="28" fg:w="1"/><text x="28.8214%" y="95.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 1.02%)</title><rect x="28.5714%" y="69" width="1.0204%" height="15" fill="rgb(253,215,40)" fg:x="28" fg:w="1"/><text x="28.8214%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 1.02%)</title><rect x="29.5918%" y="229" width="1.0204%" height="15" fill="rgb(211,81,21)" fg:x="29" fg:w="1"/><text x="29.8418%" y="239.50"></text></g><g><title>core::ptr::write (1 samples, 1.02%)</title><rect x="29.5918%" y="213" width="1.0204%" height="15" fill="rgb(208,190,38)" fg:x="29" fg:w="1"/><text x="29.8418%" y="223.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::code (4 samples, 4.08%)</title><rect x="27.5510%" y="277" width="4.0816%" height="15" fill="rgb(235,213,38)" fg:x="27" fg:w="4"/><text x="27.8010%" y="287.50">&lt;rev..</text></g><g><title>revm::journaled_state::JournaledState::load_code (4 samples, 4.08%)</title><rect x="27.5510%" y="261" width="4.0816%" height="15" fill="rgb(237,122,38)" fg:x="27" fg:w="4"/><text x="27.8010%" y="271.50">revm..</text></g><g><title>revm::journaled_state::JournaledState::load_account (4 samples, 4.08%)</title><rect x="27.5510%" y="245" width="4.0816%" height="15" fill="rgb(244,218,35)" fg:x="27" fg:w="4"/><text x="27.8010%" y="255.50">revm..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (1 samples, 1.02%)</title><rect x="30.6122%" y="229" width="1.0204%" height="15" fill="rgb(240,68,47)" fg:x="30" fg:w="1"/><text x="30.8622%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 1.02%)</title><rect x="30.6122%" y="213" width="1.0204%" height="15" fill="rgb(210,16,53)" fg:x="30" fg:w="1"/><text x="30.8622%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 1.02%)</title><rect x="30.6122%" y="197" width="1.0204%" height="15" fill="rgb(235,124,12)" fg:x="30" fg:w="1"/><text x="30.8622%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 1.02%)</title><rect x="30.6122%" y="181" width="1.0204%" height="15" fill="rgb(224,169,11)" fg:x="30" fg:w="1"/><text x="30.8622%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 1.02%)</title><rect x="30.6122%" y="165" width="1.0204%" height="15" fill="rgb(250,166,2)" fg:x="30" fg:w="1"/><text x="30.8622%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::interpreter::Interpreter&gt; (1 samples, 1.02%)</title><rect x="31.6327%" y="277" width="1.0204%" height="15" fill="rgb(242,216,29)" fg:x="31" fg:w="1"/><text x="31.8827%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::interpreter::memory::Memory&gt; (1 samples, 1.02%)</title><rect x="31.6327%" y="261" width="1.0204%" height="15" fill="rgb(230,116,27)" fg:x="31" fg:w="1"/><text x="31.8827%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 1.02%)</title><rect x="31.6327%" y="245" width="1.0204%" height="15" fill="rgb(228,99,48)" fg:x="31" fg:w="1"/><text x="31.8827%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 1.02%)</title><rect x="31.6327%" y="229" width="1.0204%" height="15" fill="rgb(253,11,6)" fg:x="31" fg:w="1"/><text x="31.8827%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.02%)</title><rect x="31.6327%" y="213" width="1.0204%" height="15" fill="rgb(247,143,39)" fg:x="31" fg:w="1"/><text x="31.8827%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 1.02%)</title><rect x="31.6327%" y="197" width="1.0204%" height="15" fill="rgb(236,97,10)" fg:x="31" fg:w="1"/><text x="31.8827%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 1.02%)</title><rect x="31.6327%" y="181" width="1.0204%" height="15" fill="rgb(233,208,19)" fg:x="31" fg:w="1"/><text x="31.8827%" y="191.50"></text></g><g><title>__rust_dealloc (1 samples, 1.02%)</title><rect x="31.6327%" y="165" width="1.0204%" height="15" fill="rgb(216,164,2)" fg:x="31" fg:w="1"/><text x="31.8827%" y="175.50"></text></g><g><title>revm::interpreter::Interpreter::new (1 samples, 1.02%)</title><rect x="32.6531%" y="277" width="1.0204%" height="15" fill="rgb(220,129,5)" fg:x="32" fg:w="1"/><text x="32.9031%" y="287.50"></text></g><g><title>primitive_types::U256::overflowing_sub (1 samples, 1.02%)</title><rect x="37.7551%" y="245" width="1.0204%" height="15" fill="rgb(242,17,10)" fg:x="37" fg:w="1"/><text x="38.0051%" y="255.50"></text></g><g><title>revm::instructions::bitwise::shr (1 samples, 1.02%)</title><rect x="38.7755%" y="245" width="1.0204%" height="15" fill="rgb(242,107,0)" fg:x="38" fg:w="1"/><text x="39.0255%" y="255.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::bit::Shr&lt;T&gt;&gt;::shr (1 samples, 1.02%)</title><rect x="38.7755%" y="229" width="1.0204%" height="15" fill="rgb(251,28,31)" fg:x="38" fg:w="1"/><text x="39.0255%" y="239.50"></text></g><g><title>revm::instructions::control::jump (2 samples, 2.04%)</title><rect x="39.7959%" y="245" width="2.0408%" height="15" fill="rgb(233,223,10)" fg:x="39" fg:w="2"/><text x="40.0459%" y="255.50">r..</text></g><g><title>revm::interpreter::contract::Contract::is_valid_jump (2 samples, 2.04%)</title><rect x="39.7959%" y="229" width="2.0408%" height="15" fill="rgb(215,21,27)" fg:x="39" fg:w="2"/><text x="40.0459%" y="239.50">r..</text></g><g><title>revm::interpreter::contract::ValidJumpAddress::is_valid (2 samples, 2.04%)</title><rect x="39.7959%" y="213" width="2.0408%" height="15" fill="rgb(232,23,21)" fg:x="39" fg:w="2"/><text x="40.0459%" y="223.50">r..</text></g><g><title>revm::interpreter::contract::AnalysisData::is_jump (2 samples, 2.04%)</title><rect x="39.7959%" y="197" width="2.0408%" height="15" fill="rgb(244,5,23)" fg:x="39" fg:w="2"/><text x="40.0459%" y="207.50">r..</text></g><g><title>revm::instructions::control::jumpdest (2 samples, 2.04%)</title><rect x="41.8367%" y="245" width="2.0408%" height="15" fill="rgb(226,81,46)" fg:x="41" fg:w="2"/><text x="42.0867%" y="255.50">r..</text></g><g><title>revm::interpreter::Interpreter::add_next_gas_block (1 samples, 1.02%)</title><rect x="42.8571%" y="229" width="1.0204%" height="15" fill="rgb(247,70,30)" fg:x="42" fg:w="1"/><text x="43.1071%" y="239.50"></text></g><g><title>revm::interpreter::contract::Contract::gas_block (1 samples, 1.02%)</title><rect x="42.8571%" y="213" width="1.0204%" height="15" fill="rgb(212,68,19)" fg:x="42" fg:w="1"/><text x="43.1071%" y="223.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::gas_block (1 samples, 1.02%)</title><rect x="42.8571%" y="197" width="1.0204%" height="15" fill="rgb(240,187,13)" fg:x="42" fg:w="1"/><text x="43.1071%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 1.02%)</title><rect x="42.8571%" y="181" width="1.0204%" height="15" fill="rgb(223,113,26)" fg:x="42" fg:w="1"/><text x="43.1071%" y="191.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 1.02%)</title><rect x="42.8571%" y="165" width="1.0204%" height="15" fill="rgb(206,192,2)" fg:x="42" fg:w="1"/><text x="43.1071%" y="175.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 1.02%)</title><rect x="42.8571%" y="149" width="1.0204%" height="15" fill="rgb(241,108,4)" fg:x="42" fg:w="1"/><text x="43.1071%" y="159.50"></text></g><g><title>revm::instructions::memory::mload (1 samples, 1.02%)</title><rect x="43.8776%" y="245" width="1.0204%" height="15" fill="rgb(247,173,49)" fg:x="43" fg:w="1"/><text x="44.1276%" y="255.50"></text></g><g><title>revm::instructions::stack::dup (2 samples, 2.04%)</title><rect x="44.8980%" y="245" width="2.0408%" height="15" fill="rgb(224,114,35)" fg:x="44" fg:w="2"/><text x="45.1480%" y="255.50">r..</text></g><g><title>revm::interpreter::stack::Stack::dup (2 samples, 2.04%)</title><rect x="44.8980%" y="229" width="2.0408%" height="15" fill="rgb(245,159,27)" fg:x="44" fg:w="2"/><text x="45.1480%" y="239.50">r..</text></g><g><title>revm::instructions::stack::push (2 samples, 2.04%)</title><rect x="46.9388%" y="245" width="2.0408%" height="15" fill="rgb(245,172,44)" fg:x="46" fg:w="2"/><text x="47.1888%" y="255.50">r..</text></g><g><title>revm::interpreter::stack::Stack::push_slice (2 samples, 2.04%)</title><rect x="46.9388%" y="229" width="2.0408%" height="15" fill="rgb(236,23,11)" fg:x="46" fg:w="2"/><text x="47.1888%" y="239.50">r..</text></g><g><title>core::intrinsics::copy (1 samples, 1.02%)</title><rect x="51.0204%" y="197" width="1.0204%" height="15" fill="rgb(205,117,38)" fg:x="50" fg:w="1"/><text x="51.2704%" y="207.50"></text></g><g><title>revm::instructions::stack::swap (4 samples, 4.08%)</title><rect x="48.9796%" y="245" width="4.0816%" height="15" fill="rgb(237,72,25)" fg:x="48" fg:w="4"/><text x="49.2296%" y="255.50">revm..</text></g><g><title>revm::interpreter::stack::Stack::swap (4 samples, 4.08%)</title><rect x="48.9796%" y="229" width="4.0816%" height="15" fill="rgb(244,70,9)" fg:x="48" fg:w="4"/><text x="49.2296%" y="239.50">revm..</text></g><g><title>core::ptr::swap (2 samples, 2.04%)</title><rect x="51.0204%" y="213" width="2.0408%" height="15" fill="rgb(217,125,39)" fg:x="50" fg:w="2"/><text x="51.2704%" y="223.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 1.02%)</title><rect x="52.0408%" y="197" width="1.0204%" height="15" fill="rgb(235,36,10)" fg:x="51" fg:w="1"/><text x="52.2908%" y="207.50"></text></g><g><title>revm::interpreter::Interpreter::run (20 samples, 20.41%)</title><rect x="33.6735%" y="277" width="20.4082%" height="15" fill="rgb(251,123,47)" fg:x="33" fg:w="20"/><text x="33.9235%" y="287.50">revm::interpreter::Interpreter::..</text></g><g><title>revm::instructions::eval (19 samples, 19.39%)</title><rect x="34.6939%" y="261" width="19.3878%" height="15" fill="rgb(221,13,13)" fg:x="34" fg:w="19"/><text x="34.9439%" y="271.50">revm::instructions::eval</text></g><g><title>revm::instructions::system::callvalue (1 samples, 1.02%)</title><rect x="53.0612%" y="245" width="1.0204%" height="15" fill="rgb(238,131,9)" fg:x="52" fg:w="1"/><text x="53.3112%" y="255.50"></text></g><g><title>revm::interpreter::stack::Stack::push_h256 (1 samples, 1.02%)</title><rect x="53.0612%" y="229" width="1.0204%" height="15" fill="rgb(211,50,8)" fg:x="52" fg:w="1"/><text x="53.3112%" y="239.50"></text></g><g><title>primitive_types::U256::from_big_endian (1 samples, 1.02%)</title><rect x="53.0612%" y="213" width="1.0204%" height="15" fill="rgb(245,182,24)" fg:x="52" fg:w="1"/><text x="53.3112%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 1.02%)</title><rect x="53.0612%" y="197" width="1.0204%" height="15" fill="rgb(242,14,37)" fg:x="52" fg:w="1"/><text x="53.3112%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 1.02%)</title><rect x="53.0612%" y="181" width="1.0204%" height="15" fill="rgb(246,228,12)" fg:x="52" fg:w="1"/><text x="53.3112%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 1.02%)</title><rect x="53.0612%" y="165" width="1.0204%" height="15" fill="rgb(213,55,15)" fg:x="52" fg:w="1"/><text x="53.3112%" y="175.50"></text></g><g><title>[libc-2.31.so] (1 samples, 1.02%)</title><rect x="54.0816%" y="117" width="1.0204%" height="15" fill="rgb(209,9,3)" fg:x="53" fg:w="1"/><text x="54.3316%" y="127.50"></text></g><g><title>revm::journaled_state::JournaledState::checkpoint (2 samples, 2.04%)</title><rect x="54.0816%" y="277" width="2.0408%" height="15" fill="rgb(230,59,30)" fg:x="53" fg:w="2"/><text x="54.3316%" y="287.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 2.04%)</title><rect x="54.0816%" y="261" width="2.0408%" height="15" fill="rgb(209,121,21)" fg:x="53" fg:w="2"/><text x="54.3316%" y="271.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 2.04%)</title><rect x="54.0816%" y="245" width="2.0408%" height="15" fill="rgb(220,109,13)" fg:x="53" fg:w="2"/><text x="54.3316%" y="255.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 2.04%)</title><rect x="54.0816%" y="229" width="2.0408%" height="15" fill="rgb(232,18,1)" fg:x="53" fg:w="2"/><text x="54.3316%" y="239.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 2.04%)</title><rect x="54.0816%" y="213" width="2.0408%" height="15" fill="rgb(215,41,42)" fg:x="53" fg:w="2"/><text x="54.3316%" y="223.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 2.04%)</title><rect x="54.0816%" y="197" width="2.0408%" height="15" fill="rgb(224,123,36)" fg:x="53" fg:w="2"/><text x="54.3316%" y="207.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 2.04%)</title><rect x="54.0816%" y="181" width="2.0408%" height="15" fill="rgb(240,125,3)" fg:x="53" fg:w="2"/><text x="54.3316%" y="191.50">a..</text></g><g><title>alloc::alloc::realloc (2 samples, 2.04%)</title><rect x="54.0816%" y="165" width="2.0408%" height="15" fill="rgb(205,98,50)" fg:x="53" fg:w="2"/><text x="54.3316%" y="175.50">a..</text></g><g><title>__GI___libc_realloc (2 samples, 2.04%)</title><rect x="54.0816%" y="149" width="2.0408%" height="15" fill="rgb(205,185,37)" fg:x="53" fg:w="2"/><text x="54.3316%" y="159.50">_..</text></g><g><title>_int_realloc (2 samples, 2.04%)</title><rect x="54.0816%" y="133" width="2.0408%" height="15" fill="rgb(238,207,15)" fg:x="53" fg:w="2"/><text x="54.3316%" y="143.50">_..</text></g><g><title>_int_free (1 samples, 1.02%)</title><rect x="55.1020%" y="117" width="1.0204%" height="15" fill="rgb(213,199,42)" fg:x="54" fg:w="1"/><text x="55.3520%" y="127.50"></text></g><g><title>revm::journaled_state::JournaledState::checkpoint_revert (1 samples, 1.02%)</title><rect x="56.1224%" y="277" width="1.0204%" height="15" fill="rgb(235,201,11)" fg:x="55" fg:w="1"/><text x="56.3724%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 1.02%)</title><rect x="56.1224%" y="261" width="1.0204%" height="15" fill="rgb(207,46,11)" fg:x="55" fg:w="1"/><text x="56.3724%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 1.02%)</title><rect x="56.1224%" y="245" width="1.0204%" height="15" fill="rgb(241,35,35)" fg:x="55" fg:w="1"/><text x="56.3724%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 1.02%)</title><rect x="56.1224%" y="229" width="1.0204%" height="15" fill="rgb(243,32,47)" fg:x="55" fg:w="1"/><text x="56.3724%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 1.02%)</title><rect x="56.1224%" y="213" width="1.0204%" height="15" fill="rgb(247,202,23)" fg:x="55" fg:w="1"/><text x="56.3724%" y="223.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (1 samples, 1.02%)</title><rect x="56.1224%" y="197" width="1.0204%" height="15" fill="rgb(219,102,11)" fg:x="55" fg:w="1"/><text x="56.3724%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (1 samples, 1.02%)</title><rect x="56.1224%" y="181" width="1.0204%" height="15" fill="rgb(243,110,44)" fg:x="55" fg:w="1"/><text x="56.3724%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::ok::{{closure}} (1 samples, 1.02%)</title><rect x="56.1224%" y="165" width="1.0204%" height="15" fill="rgb(222,74,54)" fg:x="55" fg:w="1"/><text x="56.3724%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 1.02%)</title><rect x="56.1224%" y="149" width="1.0204%" height="15" fill="rgb(216,99,12)" fg:x="55" fg:w="1"/><text x="56.3724%" y="159.50"></text></g><g><title>revm::journaled_state::JournaledState::checkpoint_revert::{{closure}} (1 samples, 1.02%)</title><rect x="56.1224%" y="133" width="1.0204%" height="15" fill="rgb(226,22,26)" fg:x="55" fg:w="1"/><text x="56.3724%" y="143.50"></text></g><g><title>revm::journaled_state::JournaledState::journal_revert (1 samples, 1.02%)</title><rect x="56.1224%" y="117" width="1.0204%" height="15" fill="rgb(217,163,10)" fg:x="55" fg:w="1"/><text x="56.3724%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 1.02%)</title><rect x="56.1224%" y="101" width="1.0204%" height="15" fill="rgb(213,25,53)" fg:x="55" fg:w="1"/><text x="56.3724%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 1.02%)</title><rect x="56.1224%" y="85" width="1.0204%" height="15" fill="rgb(252,105,26)" fg:x="55" fg:w="1"/><text x="56.3724%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 1.02%)</title><rect x="56.1224%" y="69" width="1.0204%" height="15" fill="rgb(220,39,43)" fg:x="55" fg:w="1"/><text x="56.3724%" y="79.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 1.02%)</title><rect x="56.1224%" y="53" width="1.0204%" height="15" fill="rgb(229,68,48)" fg:x="55" fg:w="1"/><text x="56.3724%" y="63.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 1.02%)</title><rect x="56.1224%" y="37" width="1.0204%" height="15" fill="rgb(252,8,32)" fg:x="55" fg:w="1"/><text x="56.3724%" y="47.50"></text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner (32 samples, 32.65%)</title><rect x="25.5102%" y="293" width="32.6531%" height="15" fill="rgb(223,20,43)" fg:x="25" fg:w="32"/><text x="25.7602%" y="303.50">revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner</text></g><g><title>revm::journaled_state::JournaledState::transfer (1 samples, 1.02%)</title><rect x="57.1429%" y="277" width="1.0204%" height="15" fill="rgb(229,81,49)" fg:x="56" fg:w="1"/><text x="57.3929%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 1.02%)</title><rect x="57.1429%" y="261" width="1.0204%" height="15" fill="rgb(236,28,36)" fg:x="56" fg:w="1"/><text x="57.3929%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 1.02%)</title><rect x="57.1429%" y="245" width="1.0204%" height="15" fill="rgb(249,185,26)" fg:x="56" fg:w="1"/><text x="57.3929%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 1.02%)</title><rect x="57.1429%" y="229" width="1.0204%" height="15" fill="rgb(249,174,33)" fg:x="56" fg:w="1"/><text x="57.3929%" y="239.50"></text></g><g><title>&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (1 samples, 1.02%)</title><rect x="57.1429%" y="213" width="1.0204%" height="15" fill="rgb(233,201,37)" fg:x="56" fg:w="1"/><text x="57.3929%" y="223.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (1 samples, 1.02%)</title><rect x="57.1429%" y="197" width="1.0204%" height="15" fill="rgb(221,78,26)" fg:x="56" fg:w="1"/><text x="57.3929%" y="207.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (1 samples, 1.02%)</title><rect x="57.1429%" y="181" width="1.0204%" height="15" fill="rgb(250,127,30)" fg:x="56" fg:w="1"/><text x="57.3929%" y="191.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 1.02%)</title><rect x="58.1633%" y="261" width="1.0204%" height="15" fill="rgb(230,49,44)" fg:x="57" fg:w="1"/><text x="58.4133%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 1.02%)</title><rect x="58.1633%" y="245" width="1.0204%" height="15" fill="rgb(229,67,23)" fg:x="57" fg:w="1"/><text x="58.4133%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 1.02%)</title><rect x="58.1633%" y="229" width="1.0204%" height="15" fill="rgb(249,83,47)" fg:x="57" fg:w="1"/><text x="58.4133%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 1.02%)</title><rect x="58.1633%" y="213" width="1.0204%" height="15" fill="rgb(215,43,3)" fg:x="57" fg:w="1"/><text x="58.4133%" y="223.50"></text></g><g><title>__GI___libc_malloc (1 samples, 1.02%)</title><rect x="58.1633%" y="197" width="1.0204%" height="15" fill="rgb(238,154,13)" fg:x="57" fg:w="1"/><text x="58.4133%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 1.02%)</title><rect x="59.1837%" y="261" width="1.0204%" height="15" fill="rgb(219,56,2)" fg:x="58" fg:w="1"/><text x="59.4337%" y="271.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 1.02%)</title><rect x="59.1837%" y="245" width="1.0204%" height="15" fill="rgb(233,0,4)" fg:x="58" fg:w="1"/><text x="59.4337%" y="255.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::default::Default&gt;::default (1 samples, 1.02%)</title><rect x="59.1837%" y="229" width="1.0204%" height="15" fill="rgb(235,30,7)" fg:x="58" fg:w="1"/><text x="59.4337%" y="239.50"></text></g><g><title>ahash::random_state::RandomState::new (1 samples, 1.02%)</title><rect x="59.1837%" y="213" width="1.0204%" height="15" fill="rgb(250,79,13)" fg:x="58" fg:w="1"/><text x="59.4337%" y="223.50"></text></g><g><title>ahash::random_state::RandomState::from_keys (1 samples, 1.02%)</title><rect x="59.1837%" y="197" width="1.0204%" height="15" fill="rgb(211,146,34)" fg:x="58" fg:w="1"/><text x="59.4337%" y="207.50"></text></g><g><title>ahash::random_state::RandomState::from_keys::{{closure}} (1 samples, 1.02%)</title><rect x="59.1837%" y="181" width="1.0204%" height="15" fill="rgb(228,22,38)" fg:x="58" fg:w="1"/><text x="59.4337%" y="191.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 1.02%)</title><rect x="59.1837%" y="165" width="1.0204%" height="15" fill="rgb(235,168,5)" fg:x="58" fg:w="1"/><text x="59.4337%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 1.02%)</title><rect x="59.1837%" y="149" width="1.0204%" height="15" fill="rgb(221,155,16)" fg:x="58" fg:w="1"/><text x="59.4337%" y="159.50"></text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::finalize (3 samples, 3.06%)</title><rect x="58.1633%" y="293" width="3.0612%" height="15" fill="rgb(215,215,53)" fg:x="57" fg:w="3"/><text x="58.4133%" y="303.50">rev..</text></g><g><title>revm::journaled_state::JournaledState::finalize (3 samples, 3.06%)</title><rect x="58.1633%" y="277" width="3.0612%" height="15" fill="rgb(223,4,10)" fg:x="57" fg:w="3"/><text x="58.4133%" y="287.50">rev..</text></g><g><title>core::mem::take (1 samples, 1.02%)</title><rect x="60.2041%" y="261" width="1.0204%" height="15" fill="rgb(234,103,6)" fg:x="59" fg:w="1"/><text x="60.4541%" y="271.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::default::Default&gt;::default (1 samples, 1.02%)</title><rect x="60.2041%" y="245" width="1.0204%" height="15" fill="rgb(227,97,0)" fg:x="59" fg:w="1"/><text x="60.4541%" y="255.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::default::Default&gt;::default (1 samples, 1.02%)</title><rect x="60.2041%" y="229" width="1.0204%" height="15" fill="rgb(234,150,53)" fg:x="59" fg:w="1"/><text x="60.4541%" y="239.50"></text></g><g><title>ahash::random_state::RandomState::new (1 samples, 1.02%)</title><rect x="60.2041%" y="213" width="1.0204%" height="15" fill="rgb(228,201,54)" fg:x="59" fg:w="1"/><text x="60.4541%" y="223.50"></text></g><g><title>ahash::random_state::RandomState::from_keys (1 samples, 1.02%)</title><rect x="60.2041%" y="197" width="1.0204%" height="15" fill="rgb(222,22,37)" fg:x="59" fg:w="1"/><text x="60.4541%" y="207.50"></text></g><g><title>ahash::random_state::RandomState::from_keys::{{closure}} (1 samples, 1.02%)</title><rect x="60.2041%" y="181" width="1.0204%" height="15" fill="rgb(237,53,32)" fg:x="59" fg:w="1"/><text x="60.4541%" y="191.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 1.02%)</title><rect x="60.2041%" y="165" width="1.0204%" height="15" fill="rgb(233,25,53)" fg:x="59" fg:w="1"/><text x="60.4541%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 1.02%)</title><rect x="60.2041%" y="149" width="1.0204%" height="15" fill="rgb(210,40,34)" fg:x="59" fg:w="1"/><text x="60.4541%" y="159.50"></text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::initialization (1 samples, 1.02%)</title><rect x="61.2245%" y="293" width="1.0204%" height="15" fill="rgb(241,220,44)" fg:x="60" fg:w="1"/><text x="61.4745%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 1.02%)</title><rect x="61.2245%" y="277" width="1.0204%" height="15" fill="rgb(235,28,35)" fg:x="60" fg:w="1"/><text x="61.4745%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 1.02%)</title><rect x="61.2245%" y="261" width="1.0204%" height="15" fill="rgb(210,56,17)" fg:x="60" fg:w="1"/><text x="61.4745%" y="271.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 1.02%)</title><rect x="61.2245%" y="245" width="1.0204%" height="15" fill="rgb(224,130,29)" fg:x="60" fg:w="1"/><text x="61.4745%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 1.02%)</title><rect x="61.2245%" y="229" width="1.0204%" height="15" fill="rgb(235,212,8)" fg:x="60" fg:w="1"/><text x="61.4745%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 1.02%)</title><rect x="61.2245%" y="213" width="1.0204%" height="15" fill="rgb(223,33,50)" fg:x="60" fg:w="1"/><text x="61.4745%" y="223.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 1.02%)</title><rect x="61.2245%" y="197" width="1.0204%" height="15" fill="rgb(219,149,13)" fg:x="60" fg:w="1"/><text x="61.4745%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::{{closure}} (1 samples, 1.02%)</title><rect x="61.2245%" y="181" width="1.0204%" height="15" fill="rgb(250,156,29)" fg:x="60" fg:w="1"/><text x="61.4745%" y="191.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transact&gt;::transact (38 samples, 38.78%)</title><rect x="25.5102%" y="309" width="38.7755%" height="15" fill="rgb(216,193,19)" fg:x="25" fg:w="38"/><text x="25.7602%" y="319.50">&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transac..</text></g><g><title>revm::journaled_state::JournaledState::load_account (2 samples, 2.04%)</title><rect x="62.2449%" y="293" width="2.0408%" height="15" fill="rgb(216,135,14)" fg:x="61" fg:w="2"/><text x="62.4949%" y="303.50">r..</text></g><g><title>hashbrown::map::VacantEntry&lt;K,V,S,A&gt;::insert (2 samples, 2.04%)</title><rect x="62.2449%" y="277" width="2.0408%" height="15" fill="rgb(241,47,5)" fg:x="61" fg:w="2"/><text x="62.4949%" y="287.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_entry (2 samples, 2.04%)</title><rect x="62.2449%" y="261" width="2.0408%" height="15" fill="rgb(233,42,35)" fg:x="61" fg:w="2"/><text x="62.4949%" y="271.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 2.04%)</title><rect x="62.2449%" y="245" width="2.0408%" height="15" fill="rgb(231,13,6)" fg:x="61" fg:w="2"/><text x="62.4949%" y="255.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 2.04%)</title><rect x="62.2449%" y="229" width="2.0408%" height="15" fill="rgb(207,181,40)" fg:x="61" fg:w="2"/><text x="62.4949%" y="239.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 2.04%)</title><rect x="62.2449%" y="213" width="2.0408%" height="15" fill="rgb(254,173,49)" fg:x="61" fg:w="2"/><text x="62.4949%" y="223.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (2 samples, 2.04%)</title><rect x="62.2449%" y="197" width="2.0408%" height="15" fill="rgb(221,1,38)" fg:x="61" fg:w="2"/><text x="62.4949%" y="207.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (2 samples, 2.04%)</title><rect x="62.2449%" y="181" width="2.0408%" height="15" fill="rgb(206,124,46)" fg:x="61" fg:w="2"/><text x="62.4949%" y="191.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (2 samples, 2.04%)</title><rect x="62.2449%" y="165" width="2.0408%" height="15" fill="rgb(249,21,11)" fg:x="61" fg:w="2"/><text x="62.4949%" y="175.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (2 samples, 2.04%)</title><rect x="62.2449%" y="149" width="2.0408%" height="15" fill="rgb(222,201,40)" fg:x="61" fg:w="2"/><text x="62.4949%" y="159.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (2 samples, 2.04%)</title><rect x="62.2449%" y="133" width="2.0408%" height="15" fill="rgb(235,61,29)" fg:x="61" fg:w="2"/><text x="62.4949%" y="143.50">h..</text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (2 samples, 2.04%)</title><rect x="62.2449%" y="117" width="2.0408%" height="15" fill="rgb(219,207,3)" fg:x="61" fg:w="2"/><text x="62.4949%" y="127.50">h..</text></g><g><title>&lt;hashbrown::raw::alloc::inner::Global as hashbrown::raw::alloc::inner::Allocator&gt;::allocate (2 samples, 2.04%)</title><rect x="62.2449%" y="101" width="2.0408%" height="15" fill="rgb(222,56,46)" fg:x="61" fg:w="2"/><text x="62.4949%" y="111.50">&lt;..</text></g><g><title>alloc::alloc::alloc (2 samples, 2.04%)</title><rect x="62.2449%" y="85" width="2.0408%" height="15" fill="rgb(239,76,54)" fg:x="61" fg:w="2"/><text x="62.4949%" y="95.50">a..</text></g><g><title>__GI___libc_malloc (2 samples, 2.04%)</title><rect x="62.2449%" y="69" width="2.0408%" height="15" fill="rgb(231,124,27)" fg:x="61" fg:w="2"/><text x="62.4949%" y="79.50">_..</text></g><g><title>_int_malloc (2 samples, 2.04%)</title><rect x="62.2449%" y="53" width="2.0408%" height="15" fill="rgb(249,195,6)" fg:x="61" fg:w="2"/><text x="62.4949%" y="63.50">_..</text></g><g><title>malloc_consolidate (2 samples, 2.04%)</title><rect x="62.2449%" y="37" width="2.0408%" height="15" fill="rgb(237,174,47)" fg:x="61" fg:w="2"/><text x="62.4949%" y="47.50">m..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn revm::evm_impl::Transact&gt;&gt; (1 samples, 1.02%)</title><rect x="64.2857%" y="309" width="1.0204%" height="15" fill="rgb(206,201,31)" fg:x="63" fg:w="1"/><text x="64.5357%" y="319.50"></text></g><g><title>__GI___libc_free (1 samples, 1.02%)</title><rect x="64.2857%" y="293" width="1.0204%" height="15" fill="rgb(231,57,52)" fg:x="63" fg:w="1"/><text x="64.5357%" y="303.50"></text></g><g><title>rust_evm_bench::bench_revm (41 samples, 41.84%)</title><rect x="24.4898%" y="677" width="41.8367%" height="15" fill="rgb(248,177,22)" fg:x="24" fg:w="41"/><text x="24.7398%" y="687.50">rust_evm_bench::bench_revm</text></g><g><title>microbench::bench (41 samples, 41.84%)</title><rect x="24.4898%" y="661" width="41.8367%" height="15" fill="rgb(215,211,37)" fg:x="24" fg:w="41"/><text x="24.7398%" y="671.50">microbench::bench</text></g><g><title>microbench::bench_impl (41 samples, 41.84%)</title><rect x="24.4898%" y="645" width="41.8367%" height="15" fill="rgb(241,128,51)" fg:x="24" fg:w="41"/><text x="24.7398%" y="655.50">microbench::bench_impl</text></g><g><title>microbench::bench::{{closure}} (41 samples, 41.84%)</title><rect x="24.4898%" y="629" width="41.8367%" height="15" fill="rgb(227,165,31)" fg:x="24" fg:w="41"/><text x="24.7398%" y="639.50">microbench::bench::{{closure}}</text></g><g><title>microbench::measure (41 samples, 41.84%)</title><rect x="24.4898%" y="613" width="41.8367%" height="15" fill="rgb(228,167,24)" fg:x="24" fg:w="41"/><text x="24.7398%" y="623.50">microbench::measure</text></g><g><title>microbench::measure_impl (41 samples, 41.84%)</title><rect x="24.4898%" y="597" width="41.8367%" height="15" fill="rgb(228,143,12)" fg:x="24" fg:w="41"/><text x="24.7398%" y="607.50">microbench::measure_impl</text></g><g><title>core::iter::traits::iterator::Iterator::collect (41 samples, 41.84%)</title><rect x="24.4898%" y="581" width="41.8367%" height="15" fill="rgb(249,149,8)" fg:x="24" fg:w="41"/><text x="24.7398%" y="591.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (41 samples, 41.84%)</title><rect x="24.4898%" y="565" width="41.8367%" height="15" fill="rgb(243,35,44)" fg:x="24" fg:w="41"/><text x="24.7398%" y="575.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41 samples, 41.84%)</title><rect x="24.4898%" y="549" width="41.8367%" height="15" fill="rgb(246,89,9)" fg:x="24" fg:w="41"/><text x="24.7398%" y="559.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (41 samples, 41.84%)</title><rect x="24.4898%" y="533" width="41.8367%" height="15" fill="rgb(233,213,13)" fg:x="24" fg:w="41"/><text x="24.7398%" y="543.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIt..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (41 samples, 41.84%)</title><rect x="24.4898%" y="517" width="41.8367%" height="15" fill="rgb(233,141,41)" fg:x="24" fg:w="41"/><text x="24.7398%" y="527.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (41 samples, 41.84%)</title><rect x="24.4898%" y="501" width="41.8367%" height="15" fill="rgb(239,167,4)" fg:x="24" fg:w="41"/><text x="24.7398%" y="511.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 41.84%)</title><rect x="24.4898%" y="485" width="41.8367%" height="15" fill="rgb(209,217,16)" fg:x="24" fg:w="41"/><text x="24.7398%" y="495.50">&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::tra..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (41 samples, 41.84%)</title><rect x="24.4898%" y="469" width="41.8367%" height="15" fill="rgb(219,88,35)" fg:x="24" fg:w="41"/><text x="24.7398%" y="479.50">core::iter::traits::iterator::Iterator::find_map</text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (41 samples, 41.84%)</title><rect x="24.4898%" y="453" width="41.8367%" height="15" fill="rgb(220,193,23)" fg:x="24" fg:w="41"/><text x="24.7398%" y="463.50">&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::tra..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (41 samples, 41.84%)</title><rect x="24.4898%" y="437" width="41.8367%" height="15" fill="rgb(230,90,52)" fg:x="24" fg:w="41"/><text x="24.7398%" y="447.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (41 samples, 41.84%)</title><rect x="24.4898%" y="421" width="41.8367%" height="15" fill="rgb(252,106,19)" fg:x="24" fg:w="41"/><text x="24.7398%" y="431.50">&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::tra..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (41 samples, 41.84%)</title><rect x="24.4898%" y="405" width="41.8367%" height="15" fill="rgb(206,74,20)" fg:x="24" fg:w="41"/><text x="24.7398%" y="415.50">core::iter::traits::iterator::Iterator::find_map::check::{{closure}}</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (41 samples, 41.84%)</title><rect x="24.4898%" y="389" width="41.8367%" height="15" fill="rgb(230,138,44)" fg:x="24" fg:w="41"/><text x="24.7398%" y="399.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for ..</text></g><g><title>microbench::measure_impl::{{closure}} (41 samples, 41.84%)</title><rect x="24.4898%" y="373" width="41.8367%" height="15" fill="rgb(235,182,43)" fg:x="24" fg:w="41"/><text x="24.7398%" y="383.50">microbench::measure_impl::{{closure}}</text></g><g><title>microbench::measure::{{closure}} (41 samples, 41.84%)</title><rect x="24.4898%" y="357" width="41.8367%" height="15" fill="rgb(242,16,51)" fg:x="24" fg:w="41"/><text x="24.7398%" y="367.50">microbench::measure::{{closure}}</text></g><g><title>rust_evm_bench::bench_revm::{{closure}} (41 samples, 41.84%)</title><rect x="24.4898%" y="341" width="41.8367%" height="15" fill="rgb(248,9,4)" fg:x="24" fg:w="41"/><text x="24.7398%" y="351.50">rust_evm_bench::bench_revm::{{closure}}</text></g><g><title>revm::evm::EVM&lt;DB&gt;::transact (40 samples, 40.82%)</title><rect x="25.5102%" y="325" width="40.8163%" height="15" fill="rgb(210,31,22)" fg:x="25" fg:w="40"/><text x="25.7602%" y="335.50">revm::evm::EVM&lt;DB&gt;::transact</text></g><g><title>revm::evm::evm_inner (1 samples, 1.02%)</title><rect x="65.3061%" y="309" width="1.0204%" height="15" fill="rgb(239,54,39)" fg:x="64" fg:w="1"/><text x="65.5561%" y="319.50"></text></g><g><title>&lt;revm_precompiles::Precompiles as core::clone::Clone&gt;::clone (1 samples, 1.02%)</title><rect x="65.3061%" y="293" width="1.0204%" height="15" fill="rgb(230,99,41)" fg:x="64" fg:w="1"/><text x="65.5561%" y="303.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (1 samples, 1.02%)</title><rect x="65.3061%" y="277" width="1.0204%" height="15" fill="rgb(253,106,12)" fg:x="64" fg:w="1"/><text x="65.5561%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 1.02%)</title><rect x="65.3061%" y="261" width="1.0204%" height="15" fill="rgb(213,46,41)" fg:x="64" fg:w="1"/><text x="65.5561%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (1 samples, 1.02%)</title><rect x="65.3061%" y="245" width="1.0204%" height="15" fill="rgb(215,133,35)" fg:x="64" fg:w="1"/><text x="65.5561%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (1 samples, 1.02%)</title><rect x="65.3061%" y="229" width="1.0204%" height="15" fill="rgb(213,28,5)" fg:x="64" fg:w="1"/><text x="65.5561%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 1.02%)</title><rect x="65.3061%" y="213" width="1.0204%" height="15" fill="rgb(215,77,49)" fg:x="64" fg:w="1"/><text x="65.5561%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 1.02%)</title><rect x="65.3061%" y="197" width="1.0204%" height="15" fill="rgb(248,100,22)" fg:x="64" fg:w="1"/><text x="65.5561%" y="207.50"></text></g><g><title>core::ptr::write (1 samples, 1.02%)</title><rect x="65.3061%" y="181" width="1.0204%" height="15" fill="rgb(208,67,9)" fg:x="64" fg:w="1"/><text x="65.5561%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;evm_runtime::Runtime&gt; (1 samples, 1.02%)</title><rect x="66.3265%" y="293" width="1.0204%" height="15" fill="rgb(219,133,21)" fg:x="65" fg:w="1"/><text x="66.5765%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;evm_core::Machine&gt; (1 samples, 1.02%)</title><rect x="66.3265%" y="277" width="1.0204%" height="15" fill="rgb(246,46,29)" fg:x="65" fg:w="1"/><text x="66.5765%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;evm_core::valids::Valids&gt; (1 samples, 1.02%)</title><rect x="66.3265%" y="261" width="1.0204%" height="15" fill="rgb(246,185,52)" fg:x="65" fg:w="1"/><text x="66.5765%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (1 samples, 1.02%)</title><rect x="66.3265%" y="245" width="1.0204%" height="15" fill="rgb(252,136,11)" fg:x="65" fg:w="1"/><text x="66.5765%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (1 samples, 1.02%)</title><rect x="66.3265%" y="229" width="1.0204%" height="15" fill="rgb(219,138,53)" fg:x="65" fg:w="1"/><text x="66.5765%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.02%)</title><rect x="66.3265%" y="213" width="1.0204%" height="15" fill="rgb(211,51,23)" fg:x="65" fg:w="1"/><text x="66.5765%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 1.02%)</title><rect x="66.3265%" y="197" width="1.0204%" height="15" fill="rgb(247,221,28)" fg:x="65" fg:w="1"/><text x="66.5765%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 1.02%)</title><rect x="66.3265%" y="181" width="1.0204%" height="15" fill="rgb(251,222,45)" fg:x="65" fg:w="1"/><text x="66.5765%" y="191.50"></text></g><g><title>__GI___libc_free (1 samples, 1.02%)</title><rect x="66.3265%" y="165" width="1.0204%" height="15" fill="rgb(217,162,53)" fg:x="65" fg:w="1"/><text x="66.5765%" y="175.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 3.06%)</title><rect x="71.4286%" y="245" width="3.0612%" height="15" fill="rgb(229,93,14)" fg:x="70" fg:w="3"/><text x="71.6786%" y="255.50">&lt;co..</text></g><g><title>evm_gasometer::Gasometer::record_dynamic_cost (1 samples, 1.02%)</title><rect x="74.4898%" y="245" width="1.0204%" height="15" fill="rgb(209,67,49)" fg:x="73" fg:w="1"/><text x="74.7398%" y="255.50"></text></g><g><title>evm_gasometer::Inner::memory_gas (1 samples, 1.02%)</title><rect x="74.4898%" y="229" width="1.0204%" height="15" fill="rgb(213,87,29)" fg:x="73" fg:w="1"/><text x="74.7398%" y="239.50"></text></g><g><title>&lt;evm::executor::stack::executor::StackExecutor&lt;S,P&gt; as evm_runtime::handler::Handler&gt;::pre_validate (8 samples, 8.16%)</title><rect x="68.3673%" y="261" width="8.1633%" height="15" fill="rgb(205,151,52)" fg:x="67" fg:w="8"/><text x="68.6173%" y="271.50">&lt;evm::execu..</text></g><g><title>evm_gasometer::static_opcode_cost (1 samples, 1.02%)</title><rect x="75.5102%" y="245" width="1.0204%" height="15" fill="rgb(253,215,39)" fg:x="74" fg:w="1"/><text x="75.7602%" y="255.50"></text></g><g><title>evm_core::opcode::Opcode::as_usize (1 samples, 1.02%)</title><rect x="75.5102%" y="229" width="1.0204%" height="15" fill="rgb(221,220,41)" fg:x="74" fg:w="1"/><text x="75.7602%" y="239.50"></text></g><g><title>evm_core::Machine::inspect (3 samples, 3.06%)</title><rect x="76.5306%" y="261" width="3.0612%" height="15" fill="rgb(218,133,21)" fg:x="75" fg:w="3"/><text x="76.7806%" y="271.50">evm..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2 samples, 2.04%)</title><rect x="77.5510%" y="245" width="2.0408%" height="15" fill="rgb(221,193,43)" fg:x="76" fg:w="2"/><text x="77.8010%" y="255.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2 samples, 2.04%)</title><rect x="77.5510%" y="229" width="2.0408%" height="15" fill="rgb(240,128,52)" fg:x="76" fg:w="2"/><text x="77.8010%" y="239.50">&lt;..</text></g><g><title>evm_core::eval::eval_add (1 samples, 1.02%)</title><rect x="81.6327%" y="229" width="1.0204%" height="15" fill="rgb(253,114,12)" fg:x="80" fg:w="1"/><text x="81.8827%" y="239.50"></text></g><g><title>primitive_types::U256::from_big_endian (1 samples, 1.02%)</title><rect x="81.6327%" y="213" width="1.0204%" height="15" fill="rgb(215,223,47)" fg:x="80" fg:w="1"/><text x="81.8827%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 1.02%)</title><rect x="81.6327%" y="197" width="1.0204%" height="15" fill="rgb(248,225,23)" fg:x="80" fg:w="1"/><text x="81.8827%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 1.02%)</title><rect x="81.6327%" y="181" width="1.0204%" height="15" fill="rgb(250,108,0)" fg:x="80" fg:w="1"/><text x="81.8827%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 1.02%)</title><rect x="81.6327%" y="165" width="1.0204%" height="15" fill="rgb(228,208,7)" fg:x="80" fg:w="1"/><text x="81.8827%" y="175.50"></text></g><g><title>evm_core::eval::eval_calldataload (3 samples, 3.06%)</title><rect x="82.6531%" y="229" width="3.0612%" height="15" fill="rgb(244,45,10)" fg:x="81" fg:w="3"/><text x="82.9031%" y="239.50">evm..</text></g><g><title>evm_core::eval::misc::calldataload (3 samples, 3.06%)</title><rect x="82.6531%" y="213" width="3.0612%" height="15" fill="rgb(207,125,25)" fg:x="81" fg:w="3"/><text x="82.9031%" y="223.50">evm..</text></g><g><title>core::cmp::PartialOrd::le (1 samples, 1.02%)</title><rect x="84.6939%" y="197" width="1.0204%" height="15" fill="rgb(210,195,18)" fg:x="83" fg:w="1"/><text x="84.9439%" y="207.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 1.02%)</title><rect x="84.6939%" y="181" width="1.0204%" height="15" fill="rgb(249,80,12)" fg:x="83" fg:w="1"/><text x="84.9439%" y="191.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::Ord&gt;::cmp (1 samples, 1.02%)</title><rect x="84.6939%" y="165" width="1.0204%" height="15" fill="rgb(221,65,9)" fg:x="83" fg:w="1"/><text x="84.9439%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp (1 samples, 1.02%)</title><rect x="84.6939%" y="149" width="1.0204%" height="15" fill="rgb(235,49,36)" fg:x="83" fg:w="1"/><text x="84.9439%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by (1 samples, 1.02%)</title><rect x="84.6939%" y="133" width="1.0204%" height="15" fill="rgb(225,32,20)" fg:x="83" fg:w="1"/><text x="84.9439%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp::{{closure}} (1 samples, 1.02%)</title><rect x="84.6939%" y="117" width="1.0204%" height="15" fill="rgb(215,141,46)" fg:x="83" fg:w="1"/><text x="84.9439%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for &amp;A&gt;::cmp (1 samples, 1.02%)</title><rect x="84.6939%" y="101" width="1.0204%" height="15" fill="rgb(250,160,47)" fg:x="83" fg:w="1"/><text x="84.9439%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (1 samples, 1.02%)</title><rect x="84.6939%" y="85" width="1.0204%" height="15" fill="rgb(216,222,40)" fg:x="83" fg:w="1"/><text x="84.9439%" y="95.50"></text></g><g><title>evm_core::eval::eval_jump (1 samples, 1.02%)</title><rect x="85.7143%" y="229" width="1.0204%" height="15" fill="rgb(234,217,39)" fg:x="84" fg:w="1"/><text x="85.9643%" y="239.50"></text></g><g><title>evm_core::eval::misc::jump (1 samples, 1.02%)</title><rect x="85.7143%" y="213" width="1.0204%" height="15" fill="rgb(207,178,40)" fg:x="84" fg:w="1"/><text x="85.9643%" y="223.50"></text></g><g><title>evm_core::eval::eval_jumpi (2 samples, 2.04%)</title><rect x="86.7347%" y="229" width="2.0408%" height="15" fill="rgb(221,136,13)" fg:x="85" fg:w="2"/><text x="86.9847%" y="239.50">e..</text></g><g><title>evm_core::eval::misc::jumpi (2 samples, 2.04%)</title><rect x="86.7347%" y="213" width="2.0408%" height="15" fill="rgb(249,199,10)" fg:x="85" fg:w="2"/><text x="86.9847%" y="223.50">e..</text></g><g><title>core::cmp::PartialEq::ne (2 samples, 2.04%)</title><rect x="86.7347%" y="197" width="2.0408%" height="15" fill="rgb(249,222,13)" fg:x="85" fg:w="2"/><text x="86.9847%" y="207.50">c..</text></g><g><title>&lt;primitive_types::H256 as core::cmp::PartialEq&gt;::eq (2 samples, 2.04%)</title><rect x="86.7347%" y="181" width="2.0408%" height="15" fill="rgb(244,185,38)" fg:x="85" fg:w="2"/><text x="86.9847%" y="191.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 2.04%)</title><rect x="86.7347%" y="165" width="2.0408%" height="15" fill="rgb(236,202,9)" fg:x="85" fg:w="2"/><text x="86.9847%" y="175.50">c..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 2.04%)</title><rect x="86.7347%" y="149" width="2.0408%" height="15" fill="rgb(250,229,37)" fg:x="85" fg:w="2"/><text x="86.9847%" y="159.50">c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 2.04%)</title><rect x="86.7347%" y="133" width="2.0408%" height="15" fill="rgb(206,174,23)" fg:x="85" fg:w="2"/><text x="86.9847%" y="143.50">&lt;..</text></g><g><title>evm_core::eval::eval_lt (1 samples, 1.02%)</title><rect x="88.7755%" y="229" width="1.0204%" height="15" fill="rgb(211,33,43)" fg:x="87" fg:w="1"/><text x="89.0255%" y="239.50"></text></g><g><title>primitive_types::U256::from_big_endian (1 samples, 1.02%)</title><rect x="88.7755%" y="213" width="1.0204%" height="15" fill="rgb(245,58,50)" fg:x="87" fg:w="1"/><text x="89.0255%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 1.02%)</title><rect x="88.7755%" y="197" width="1.0204%" height="15" fill="rgb(244,68,36)" fg:x="87" fg:w="1"/><text x="89.0255%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 1.02%)</title><rect x="88.7755%" y="181" width="1.0204%" height="15" fill="rgb(232,229,15)" fg:x="87" fg:w="1"/><text x="89.0255%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 1.02%)</title><rect x="88.7755%" y="165" width="1.0204%" height="15" fill="rgb(254,30,23)" fg:x="87" fg:w="1"/><text x="89.0255%" y="175.50"></text></g><g><title>evm_core::memory::Memory::resize_offset (1 samples, 1.02%)</title><rect x="89.7959%" y="197" width="1.0204%" height="15" fill="rgb(235,160,14)" fg:x="88" fg:w="1"/><text x="90.0459%" y="207.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::PartialEq&gt;::eq (1 samples, 1.02%)</title><rect x="89.7959%" y="181" width="1.0204%" height="15" fill="rgb(212,155,44)" fg:x="88" fg:w="1"/><text x="90.0459%" y="191.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 1.02%)</title><rect x="89.7959%" y="165" width="1.0204%" height="15" fill="rgb(226,2,50)" fg:x="88" fg:w="1"/><text x="90.0459%" y="175.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1 samples, 1.02%)</title><rect x="89.7959%" y="149" width="1.0204%" height="15" fill="rgb(234,177,6)" fg:x="88" fg:w="1"/><text x="90.0459%" y="159.50"></text></g><g><title>evm_core::eval::eval_mstore (2 samples, 2.04%)</title><rect x="89.7959%" y="229" width="2.0408%" height="15" fill="rgb(217,24,9)" fg:x="88" fg:w="2"/><text x="90.0459%" y="239.50">e..</text></g><g><title>evm_core::eval::misc::mstore (2 samples, 2.04%)</title><rect x="89.7959%" y="213" width="2.0408%" height="15" fill="rgb(220,13,46)" fg:x="88" fg:w="2"/><text x="90.0459%" y="223.50">e..</text></g><g><title>evm_core::stack::Stack::pop (1 samples, 1.02%)</title><rect x="90.8163%" y="197" width="1.0204%" height="15" fill="rgb(239,221,27)" fg:x="89" fg:w="1"/><text x="91.0663%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 1.02%)</title><rect x="90.8163%" y="181" width="1.0204%" height="15" fill="rgb(222,198,25)" fg:x="89" fg:w="1"/><text x="91.0663%" y="191.50"></text></g><g><title>evm::executor::stack::executor::StackExecutor&lt;S,P&gt;::execute (27 samples, 27.55%)</title><rect x="67.3469%" y="293" width="27.5510%" height="15" fill="rgb(211,99,13)" fg:x="66" fg:w="27"/><text x="67.5969%" y="303.50">evm::executor::stack::executor::StackExecuto..</text></g><g><title>evm_runtime::Runtime::run (27 samples, 27.55%)</title><rect x="67.3469%" y="277" width="27.5510%" height="15" fill="rgb(232,111,31)" fg:x="66" fg:w="27"/><text x="67.5969%" y="287.50">evm_runtime::Runtime::run</text></g><g><title>evm_core::Machine::step (15 samples, 15.31%)</title><rect x="79.5918%" y="261" width="15.3061%" height="15" fill="rgb(245,82,37)" fg:x="78" fg:w="15"/><text x="79.8418%" y="271.50">evm_core::Machine::step</text></g><g><title>evm_core::eval::eval (13 samples, 13.27%)</title><rect x="81.6327%" y="245" width="13.2653%" height="15" fill="rgb(227,149,46)" fg:x="80" fg:w="13"/><text x="81.8827%" y="255.50">evm_core::eval::eval</text></g><g><title>evm_core::eval::eval_pop (3 samples, 3.06%)</title><rect x="91.8367%" y="229" width="3.0612%" height="15" fill="rgb(218,36,50)" fg:x="90" fg:w="3"/><text x="92.0867%" y="239.50">evm..</text></g><g><title>evm_core::eval::misc::pop (2 samples, 2.04%)</title><rect x="92.8571%" y="213" width="2.0408%" height="15" fill="rgb(226,80,48)" fg:x="91" fg:w="2"/><text x="93.1071%" y="223.50">e..</text></g><g><title>evm_core::stack::Stack::pop (2 samples, 2.04%)</title><rect x="92.8571%" y="197" width="2.0408%" height="15" fill="rgb(238,224,15)" fg:x="91" fg:w="2"/><text x="93.1071%" y="207.50">e..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 2.04%)</title><rect x="92.8571%" y="181" width="2.0408%" height="15" fill="rgb(241,136,10)" fg:x="91" fg:w="2"/><text x="93.1071%" y="191.50">a..</text></g><g><title>all (98 samples, 100%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(208,32,45)" fg:x="0" fg:w="98"/><text x="0.2500%" y="975.50"></text></g><g><title>rust-evm-bench (94 samples, 95.92%)</title><rect x="4.0816%" y="949" width="95.9184%" height="15" fill="rgb(207,135,9)" fg:x="4" fg:w="94"/><text x="4.3316%" y="959.50">rust-evm-bench</text></g><g><title>_start (74 samples, 75.51%)</title><rect x="24.4898%" y="933" width="75.5102%" height="15" fill="rgb(206,86,44)" fg:x="24" fg:w="74"/><text x="24.7398%" y="943.50">_start</text></g><g><title>__libc_start_main (74 samples, 75.51%)</title><rect x="24.4898%" y="917" width="75.5102%" height="15" fill="rgb(245,177,15)" fg:x="24" fg:w="74"/><text x="24.7398%" y="927.50">__libc_start_main</text></g><g><title>main (74 samples, 75.51%)</title><rect x="24.4898%" y="901" width="75.5102%" height="15" fill="rgb(206,64,50)" fg:x="24" fg:w="74"/><text x="24.7398%" y="911.50">main</text></g><g><title>std::rt::lang_start_internal (74 samples, 75.51%)</title><rect x="24.4898%" y="885" width="75.5102%" height="15" fill="rgb(234,36,40)" fg:x="24" fg:w="74"/><text x="24.7398%" y="895.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (74 samples, 75.51%)</title><rect x="24.4898%" y="869" width="75.5102%" height="15" fill="rgb(213,64,8)" fg:x="24" fg:w="74"/><text x="24.7398%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (74 samples, 75.51%)</title><rect x="24.4898%" y="853" width="75.5102%" height="15" fill="rgb(210,75,36)" fg:x="24" fg:w="74"/><text x="24.7398%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (74 samples, 75.51%)</title><rect x="24.4898%" y="837" width="75.5102%" height="15" fill="rgb(229,88,21)" fg:x="24" fg:w="74"/><text x="24.7398%" y="847.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (74 samples, 75.51%)</title><rect x="24.4898%" y="821" width="75.5102%" height="15" fill="rgb(252,204,47)" fg:x="24" fg:w="74"/><text x="24.7398%" y="831.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (74 samples, 75.51%)</title><rect x="24.4898%" y="805" width="75.5102%" height="15" fill="rgb(208,77,27)" fg:x="24" fg:w="74"/><text x="24.7398%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (74 samples, 75.51%)</title><rect x="24.4898%" y="789" width="75.5102%" height="15" fill="rgb(221,76,26)" fg:x="24" fg:w="74"/><text x="24.7398%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (74 samples, 75.51%)</title><rect x="24.4898%" y="773" width="75.5102%" height="15" fill="rgb(225,139,18)" fg:x="24" fg:w="74"/><text x="24.7398%" y="783.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (74 samples, 75.51%)</title><rect x="24.4898%" y="757" width="75.5102%" height="15" fill="rgb(230,137,11)" fg:x="24" fg:w="74"/><text x="24.7398%" y="767.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (74 samples, 75.51%)</title><rect x="24.4898%" y="741" width="75.5102%" height="15" fill="rgb(212,28,1)" fg:x="24" fg:w="74"/><text x="24.7398%" y="751.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (74 samples, 75.51%)</title><rect x="24.4898%" y="725" width="75.5102%" height="15" fill="rgb(248,164,17)" fg:x="24" fg:w="74"/><text x="24.7398%" y="735.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (74 samples, 75.51%)</title><rect x="24.4898%" y="709" width="75.5102%" height="15" fill="rgb(222,171,42)" fg:x="24" fg:w="74"/><text x="24.7398%" y="719.50">core::ops::function::FnOnce::call_once</text></g><g><title>rust_evm_bench::main (74 samples, 75.51%)</title><rect x="24.4898%" y="693" width="75.5102%" height="15" fill="rgb(243,84,45)" fg:x="24" fg:w="74"/><text x="24.7398%" y="703.50">rust_evm_bench::main</text></g><g><title>rust_evm_bench::bench_rust_evm (33 samples, 33.67%)</title><rect x="66.3265%" y="677" width="33.6735%" height="15" fill="rgb(252,49,23)" fg:x="65" fg:w="33"/><text x="66.5765%" y="687.50">rust_evm_bench::bench_rust_evm</text></g><g><title>microbench::bench (33 samples, 33.67%)</title><rect x="66.3265%" y="661" width="33.6735%" height="15" fill="rgb(215,19,7)" fg:x="65" fg:w="33"/><text x="66.5765%" y="671.50">microbench::bench</text></g><g><title>microbench::bench_impl (33 samples, 33.67%)</title><rect x="66.3265%" y="645" width="33.6735%" height="15" fill="rgb(238,81,41)" fg:x="65" fg:w="33"/><text x="66.5765%" y="655.50">microbench::bench_impl</text></g><g><title>microbench::bench::{{closure}} (33 samples, 33.67%)</title><rect x="66.3265%" y="629" width="33.6735%" height="15" fill="rgb(210,199,37)" fg:x="65" fg:w="33"/><text x="66.5765%" y="639.50">microbench::bench::{{closure}}</text></g><g><title>microbench::measure (33 samples, 33.67%)</title><rect x="66.3265%" y="613" width="33.6735%" height="15" fill="rgb(244,192,49)" fg:x="65" fg:w="33"/><text x="66.5765%" y="623.50">microbench::measure</text></g><g><title>microbench::measure_impl (33 samples, 33.67%)</title><rect x="66.3265%" y="597" width="33.6735%" height="15" fill="rgb(226,211,11)" fg:x="65" fg:w="33"/><text x="66.5765%" y="607.50">microbench::measure_impl</text></g><g><title>core::iter::traits::iterator::Iterator::collect (33 samples, 33.67%)</title><rect x="66.3265%" y="581" width="33.6735%" height="15" fill="rgb(236,162,54)" fg:x="65" fg:w="33"/><text x="66.5765%" y="591.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (33 samples, 33.67%)</title><rect x="66.3265%" y="565" width="33.6735%" height="15" fill="rgb(220,229,9)" fg:x="65" fg:w="33"/><text x="66.5765%" y="575.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Fro..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33 samples, 33.67%)</title><rect x="66.3265%" y="549" width="33.6735%" height="15" fill="rgb(250,87,22)" fg:x="65" fg:w="33"/><text x="66.5765%" y="559.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::Spec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (33 samples, 33.67%)</title><rect x="66.3265%" y="533" width="33.6735%" height="15" fill="rgb(239,43,17)" fg:x="65" fg:w="33"/><text x="66.5765%" y="543.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_neste..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (33 samples, 33.67%)</title><rect x="66.3265%" y="517" width="33.6735%" height="15" fill="rgb(231,177,25)" fg:x="65" fg:w="33"/><text x="66.5765%" y="527.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecE..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (33 samples, 33.67%)</title><rect x="66.3265%" y="501" width="33.6735%" height="15" fill="rgb(219,179,1)" fg:x="65" fg:w="33"/><text x="66.5765%" y="511.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 33.67%)</title><rect x="66.3265%" y="485" width="33.6735%" height="15" fill="rgb(238,219,53)" fg:x="65" fg:w="33"/><text x="66.5765%" y="495.50">&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as co..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (33 samples, 33.67%)</title><rect x="66.3265%" y="469" width="33.6735%" height="15" fill="rgb(232,167,36)" fg:x="65" fg:w="33"/><text x="66.5765%" y="479.50">core::iter::traits::iterator::Iterator::find_map</text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (33 samples, 33.67%)</title><rect x="66.3265%" y="453" width="33.6735%" height="15" fill="rgb(244,19,51)" fg:x="65" fg:w="33"/><text x="66.5765%" y="463.50">&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as co..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (33 samples, 33.67%)</title><rect x="66.3265%" y="437" width="33.6735%" height="15" fill="rgb(224,6,22)" fg:x="65" fg:w="33"/><text x="66.5765%" y="447.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (33 samples, 33.67%)</title><rect x="66.3265%" y="421" width="33.6735%" height="15" fill="rgb(224,145,5)" fg:x="65" fg:w="33"/><text x="66.5765%" y="431.50">&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as co..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (33 samples, 33.67%)</title><rect x="66.3265%" y="405" width="33.6735%" height="15" fill="rgb(234,130,49)" fg:x="65" fg:w="33"/><text x="66.5765%" y="415.50">core::iter::traits::iterator::Iterator::find_map::check..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (33 samples, 33.67%)</title><rect x="66.3265%" y="389" width="33.6735%" height="15" fill="rgb(254,6,2)" fg:x="65" fg:w="33"/><text x="66.5765%" y="399.50">core::ops::function::impls::&lt;impl core::ops::function::..</text></g><g><title>microbench::measure_impl::{{closure}} (33 samples, 33.67%)</title><rect x="66.3265%" y="373" width="33.6735%" height="15" fill="rgb(208,96,46)" fg:x="65" fg:w="33"/><text x="66.5765%" y="383.50">microbench::measure_impl::{{closure}}</text></g><g><title>microbench::measure::{{closure}} (33 samples, 33.67%)</title><rect x="66.3265%" y="357" width="33.6735%" height="15" fill="rgb(239,3,39)" fg:x="65" fg:w="33"/><text x="66.5765%" y="367.50">microbench::measure::{{closure}}</text></g><g><title>rust_evm_bench::bench_rust_evm::{{closure}} (33 samples, 33.67%)</title><rect x="66.3265%" y="341" width="33.6735%" height="15" fill="rgb(233,210,1)" fg:x="65" fg:w="33"/><text x="66.5765%" y="351.50">rust_evm_bench::bench_rust_evm::{{closure}}</text></g><g><title>evm::executor::stack::executor::StackExecutor&lt;S,P&gt;::transact_call (33 samples, 33.67%)</title><rect x="66.3265%" y="325" width="33.6735%" height="15" fill="rgb(244,137,37)" fg:x="65" fg:w="33"/><text x="66.5765%" y="335.50">evm::executor::stack::executor::StackExecutor&lt;S,P&gt;::tra..</text></g><g><title>evm::executor::stack::executor::StackExecutor&lt;S,P&gt;::call_inner (33 samples, 33.67%)</title><rect x="66.3265%" y="309" width="33.6735%" height="15" fill="rgb(240,136,2)" fg:x="65" fg:w="33"/><text x="66.5765%" y="319.50">evm::executor::stack::executor::StackExecutor&lt;S,P&gt;::cal..</text></g><g><title>evm_runtime::Runtime::new (5 samples, 5.10%)</title><rect x="94.8980%" y="293" width="5.1020%" height="15" fill="rgb(239,18,37)" fg:x="93" fg:w="5"/><text x="95.1480%" y="303.50">evm_ru..</text></g><g><title>evm_core::Machine::new (5 samples, 5.10%)</title><rect x="94.8980%" y="277" width="5.1020%" height="15" fill="rgb(218,185,22)" fg:x="93" fg:w="5"/><text x="95.1480%" y="287.50">evm_co..</text></g><g><title>evm_core::valids::Valids::new (5 samples, 5.10%)</title><rect x="94.8980%" y="261" width="5.1020%" height="15" fill="rgb(225,218,4)" fg:x="93" fg:w="5"/><text x="95.1480%" y="271.50">evm_co..</text></g></svg></svg>